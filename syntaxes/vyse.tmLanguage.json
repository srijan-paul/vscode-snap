{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "vyse",
  "patterns": [{ "include": "#code" }],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.vyse",
          "match": "\\b(?:if|while|for|return|else|break|continue)\\b"
        },
        {
          "name": "keyword.operator.vyse",
          "match": "\\b(?:is|not|or|and|typeof)\\b"
        },
        {
          "name": "keyword.operator.logical.vyse",
          "match": "(&&|!|\\|\\|)"
        },
        {
          "name": "keyword.operator.arithmetic.vyse",
          "match": "\\b(\\+|\\-|\\*|/|%|\\^|<<|>>|<<<|\\#|\\.\\.)\\b"
        },
        {
          "name": "keyword.operator.assignment.vyse",
          "match": "(=|\\+=|\\-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.assignment.vyse",
          "match": "(==|!=|>=|<=|>|<)"
        },
        {
          "name": "keyword.other",
          "match": "\\b(let|const|fn)\\b"
        },
        {
          "name": "support.function.vyse",
          "match": "\\b(import|setproto|error|print|getproto|assert|byte|input)\\b"
        },
        {
          "name": "support.class",
          "match": "\\b(List|String|Number|Bool)\\b"
        }
      ]
    },

    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.vyse",
          "match": "\\b(0x[0-9a-fA-F]*|[0-9]+(\\.?[0-9]*)?(e(\\+|-)?[0-9]+)?)\\b"
        },
        {
          "name": "constant.language.vyse",
          "match": "\\b(true|false|nil)\\b"
        }
      ]
    },

    "strings": {
      "name": "string.quoted.double.vyse",
      "begin": "\"",
      "end": "\"",
      "patterns": [{ "name": "constant.character.escape.vyse", "match": "\\\\." }]
    },

    "comment": {
      "name": "comment.line.vyse",
      "match": "--.*"
    },

    "single_quote_strings": {
      "name": "string.quoted.single.vyse",
      "begin": "'",
      "end": "'",
      "patterns": [{ "name": "constant.character.escape.vyse", "match": "\\\\." }]
    },

    "block": {
      "begin": "{",
      "beginCaptures": { "0": { "name": "punctuation.section.block.begin.vyse" } },
      "end": "}",
      "endCaptures": { "0": { "name": "punctuation.section.block.end.vyse" } },
      "patterns": [{ "include": "#code" }]
    },

    "variables": {
      "patterns": [
        { "name": "variable.language.vyse", "match": "\\b(self)\\b" },
        { "name": "variable.vyse", "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b" },
        { "name": "variable.other.vyse", "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*:" }
      ]
    },

    "function": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_][A-Za-z0-9_]*)\\s*\\(",
          "captures": { "1": { "name": "entity.name.function.vyse" } }
        }
      ]
    },

    "class": {
      "patterns": [
        {
          "match": "\\b(class)\\s+([a-zA-Z_][A-Za-z0-9_]*)",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "entity.name.class" }
          }
        }
      ]
    },

    "table": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_][A-Za-z0-9_]*)\\s*(:)",
          "captures": {
            "1": { "name": "variable.name.vyse" },
            "2": { "name": "constant.character.vyse" }
          }
        },
        {
          "match": "\\b([a-zA-Z_][A-Za-z0-9_]*)\\s*(\\.){1}",
          "captures": {
            "1": { "name": "variable.name.vyse" },
            "2": { "name": "constant.character.vyse" }
          }
        }
      ]
    },

    "code": {
      "patterns": [
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#single_quote_strings" },
        { "include": "#block" },
        { "include": "#constants" },
        { "include": "#function" },
        { "include": "#variables" },
        { "include": "#table" },
        { "include": "#class" },
        { "include": "#comment" }
      ]
    }
  },
  "scopeName": "source.vyse"
}
